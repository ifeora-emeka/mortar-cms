"use client"

import React, { useEffect, useState } from "react"
import slugify from "slugify"
import styled from "styled-components"
import { theme } from "../../../styles/theme"
import { Modal } from "../../components/ui/Modal"
import { Input } from "../../components/ui/Input"
import { TextArea } from "../../components/ui/TextArea"
import { Button } from "../../components/ui/Button"
import { FormField } from "../../components/ui/FormField"
import { useToast } from "../../components/ToastProvider"
import api from "../../../lib/api"
import { Text } from "../../components/ui/Text"

interface CreateCollectionFormValues {
    name: string;
    slug: string;
    description: string;
}

interface CreateCollectionModalProps {
    isOpen: boolean
    onClose: () => void
    onSubmit: (data: CreateCollectionFormValues) => Promise<void>
}

const Form = styled.form`
  display: flex;
  flex-direction: column;
  width: 100%;
`

const FormActions = styled.div`
  display: flex;
  gap: ${theme.spacing.sm};
  justify-content: flex-end;
  margin-top: ${theme.spacing.md};
`

const ErrorMessage = styled.div`
  background-color: ${theme.colors.error}15;
  border: 1px solid ${theme.colors.error}30;
  border-radius: ${theme.borderRadius.md};
  padding: ${theme.spacing.md};
  margin-bottom: ${theme.spacing.md};
`

const AutogeneratedInput = styled(Input)`
  color: ${theme.colors["muted-foreground"]};
  cursor: not-allowed;
  &:focus {
    border-color: ${theme.colors.border};
    box-shadow: none;
  }
`

const AutogeneratedNote = styled(Text)`
  display: flex;
  align-items: center;
  margin-top: ${theme.spacing.xs};
  svg {
    margin-right: ${theme.spacing.xs};
  }
`

export const CreateCollectionModal: React.FC<CreateCollectionModalProps> = ({
    isOpen,
    onClose,
    onSubmit
}) => {
    const { toast } = useToast()
    const [isSubmitting, setIsSubmitting] = useState(false)
    const [formValues, setFormValues] = useState<CreateCollectionFormValues>({
        name: "",
        slug: "",
        description: ""
    })
    
    useEffect(() => {
        if (formValues.name) {
            const generatedSlug = slugify(formValues.name, {
                lower: true,
                strict: true,
                trim: true
            });
            setFormValues(prev => ({
                ...prev,
                slug: generatedSlug
            }));
        } else {
            setFormValues(prev => ({
                ...prev,
                slug: ""
            }));
        }
    }, [formValues.name])

    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
        const { name, value } = e.target;
        setFormValues(prev => ({
            ...prev,
            [name]: value
        }));
    }

    const handleFormSubmit = async (e?: React.FormEvent | React.MouseEvent) => {
        if (e) {
            e.preventDefault();
        }
        
        if (!formValues.name || !formValues.slug) {
            toast({
                title: "Validation Error",
                description: "Name and slug are required fields",
                variant: "error",
                duration: 5000
            });
            return;
        }

        setIsSubmitting(true);
        try {
            const payload = {
                ...formValues,
                description: formValues.description.trim() || null
            };
            
            await api.post('/kyper/collections/create', payload);
            //@ts-ignore
            await onSubmit(payload);

            toast({
                title: "Collection created",
                description: `Successfully created collection "${formValues.name}"`,
                variant: "success",
                duration: 5000
            });

            handleClose();
        } catch (error: any) {
            console.error("Failed to create collection:", error);

            const errorMessage = error.response?.data?.message ||
                error.response?.data?.error ||
                error.message ||
                'An unexpected error occurred';

            toast({
                title: "Failed to create collection",
                description: errorMessage,
                variant: "error",
                duration: 8000
            });

            if (error.response?.status === 409) {
                toast({
                    title: "Duplicate slug detected",
                    description: "Please modify the collection name to generate a different slug",
                    variant: "warning",
                    duration: 6000
                });
            }
        } finally {
            setIsSubmitting(false);
        }
    }

    const handleClose = () => {
        setFormValues({
            name: "",
            slug: "",
            description: ""
        });
        onClose();
    }

    return (
        <Modal
            isOpen={isOpen}
            onClose={handleClose}
            size="md"
            position="center"
        >
            <Modal.Header
                heading="Create New Collection"
                subheading="Add a new content collection to your CMS"
                onClose={handleClose}
            />

            <Modal.Body>
                <Form 
                    onSubmit={handleFormSubmit} 
                    noValidate
                    onClick={(e) => e.stopPropagation()}
                >
                    <FormField
                        label="Name"
                        required
                    >
                        <Input
                            name="name"
                            value={formValues.name}
                            onChange={e => setFormValues(prev => ({
                                ...prev,
                                name: e.target.value
                            }))}
                            placeholder="e.g., Blog Posts"
                            disabled={isSubmitting}
                            required
                        />
                    </FormField>

                    <FormField
                        label="Slug"
                        description="URL-friendly identifier (automatically generated from name)"
                        required
                    >
                        <>
                            <Input
                                name="slug"
                                value={formValues.slug}
                                onChange={handleInputChange}
                                placeholder="auto-generated-slug"
                                disabled
                                readOnly
                                required
                            />
                            <AutogeneratedNote type="small" muted>
                                This field is automatically generated from the name
                            </AutogeneratedNote>
                        </>
                    </FormField>

                    <FormField
                        label="Description"
                        optional
                    >
                        <TextArea
                            name="description"
                            value={formValues.description}
                            onChange={e => {
                                setFormValues(prev => ({
                                    ...prev,
                                    description: e.target.value
                                }))
                            }}
                            placeholder="Describe what this collection will contain..."
                            disabled={isSubmitting}
                            rows={4}
                        />
                    </FormField>
                </Form>
            </Modal.Body>

            <Modal.Footer>
                <Button
                    variant="ghost"
                    onClick={handleClose}
                    disabled={isSubmitting}
                >
                    Cancel
                </Button>
                <Button
                    variant="solid"
                    color="primary"
                    onClick={handleFormSubmit}
                    disabled={isSubmitting}
                    loading={isSubmitting}
                    loadingText="Creating..."
                    spinnerType="spinner"
                    type="button"
                >
                    Create Collection
                </Button>
            </Modal.Footer>
        </Modal>
    )
}

CreateCollectionModal.displayName = "CreateCollectionModal"